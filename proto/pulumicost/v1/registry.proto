syntax = "proto3";

package pulumicost.v1;

option go_package = "github.com/rshade/pulumicost-spec/sdk/go/proto;pbc";

import "google/protobuf/timestamp.proto";

// PluginRegistryService provides gRPC interface for plugin discovery, 
// registration, and lifecycle management within the PulumiCost ecosystem.
service PluginRegistryService {
  // DiscoverPlugins discovers available plugins from configured sources.
  rpc DiscoverPlugins(DiscoverPluginsRequest) returns (DiscoverPluginsResponse);
  
  // GetPluginManifest retrieves the manifest for a specific plugin.
  rpc GetPluginManifest(GetPluginManifestRequest) returns (GetPluginManifestResponse);
  
  // ValidatePlugin validates a plugin's manifest and dependencies.
  rpc ValidatePlugin(ValidatePluginRequest) returns (ValidatePluginResponse);
  
  // InstallPlugin installs a plugin from a specified source.
  rpc InstallPlugin(InstallPluginRequest) returns (InstallPluginResponse);
  
  // UpdatePlugin updates an existing plugin to a new version.
  rpc UpdatePlugin(UpdatePluginRequest) returns (UpdatePluginResponse);
  
  // RemovePlugin removes an installed plugin.
  rpc RemovePlugin(RemovePluginRequest) returns (RemovePluginResponse);
  
  // ListInstalledPlugins lists all currently installed plugins.
  rpc ListInstalledPlugins(ListInstalledPluginsRequest) returns (ListInstalledPluginsResponse);
  
  // CheckPluginHealth verifies plugin health and connectivity.
  rpc CheckPluginHealth(CheckPluginHealthRequest) returns (CheckPluginHealthResponse);
}

// DiscoverySource defines different plugin discovery mechanisms.
enum DiscoverySource {
  DISCOVERY_SOURCE_UNSPECIFIED = 0;
  DISCOVERY_SOURCE_FILESYSTEM = 1;    // Local filesystem scanning
  DISCOVERY_SOURCE_REGISTRY = 2;      // Remote plugin registry
  DISCOVERY_SOURCE_URL = 3;           // Direct URL download
  DISCOVERY_SOURCE_GIT = 4;           // Git repository
}

// PluginStatus represents the current status of a plugin.
enum PluginStatus {
  PLUGIN_STATUS_UNSPECIFIED = 0;
  PLUGIN_STATUS_AVAILABLE = 1;        // Available for installation
  PLUGIN_STATUS_INSTALLED = 2;        // Currently installed
  PLUGIN_STATUS_ACTIVE = 3;           // Installed and running
  PLUGIN_STATUS_INACTIVE = 4;         // Installed but not running
  PLUGIN_STATUS_ERROR = 5;            // Error state
  PLUGIN_STATUS_UPDATING = 6;         // Currently being updated
}

// SecurityLevel defines plugin security trust levels.
enum SecurityLevel {
  SECURITY_LEVEL_UNSPECIFIED = 0;
  SECURITY_LEVEL_UNTRUSTED = 1;       // Untrusted, requires explicit approval
  SECURITY_LEVEL_COMMUNITY = 2;       // Community verified
  SECURITY_LEVEL_VERIFIED = 3;        // Officially verified
  SECURITY_LEVEL_OFFICIAL = 4;        // Official PulumiCost plugin
}

// DiscoverPluginsRequest contains parameters for plugin discovery.
message DiscoverPluginsRequest {
  // sources specifies which discovery sources to search (empty for all configured)
  repeated DiscoverySource sources = 1;
  // filter optionally filters results by plugin name pattern
  string filter = 2;
  // include_installed includes already installed plugins in results
  bool include_installed = 3;
}

// DiscoverPluginsResponse contains discovered plugin information.
message DiscoverPluginsResponse {
  // plugins contains the list of discovered plugins
  repeated PluginInfo plugins = 1;
  // discovery_errors contains any errors encountered during discovery
  repeated DiscoveryError discovery_errors = 2;
}

// PluginInfo provides information about a discovered or installed plugin.
message PluginInfo {
  // name is the unique plugin name
  string name = 1;
  // version is the plugin version (semantic versioning)
  string version = 2;
  // description provides a human-readable description
  string description = 3;
  // author identifies the plugin author/organization
  string author = 4;
  // source indicates where the plugin was discovered
  DiscoverySource source = 5;
  // location provides the plugin location (path, URL, etc.)
  string location = 6;
  // status indicates the current plugin status
  PluginStatus status = 7;
  // security_level indicates the plugin security trust level
  SecurityLevel security_level = 8;
  // capabilities lists the plugin's supported capabilities
  repeated string capabilities = 9;
  // requirements lists the plugin's system requirements
  PluginRequirements requirements = 10;
  // manifest_hash provides integrity verification
  string manifest_hash = 11;
  // last_updated indicates when the plugin was last updated
  google.protobuf.Timestamp last_updated = 12;
}

// PluginRequirements specifies plugin system and dependency requirements.
message PluginRequirements {
  // min_spec_version is the minimum required spec version (e.g., "0.1.0")
  string min_spec_version = 1;
  // max_spec_version is the maximum supported spec version
  string max_spec_version = 2;
  // dependencies lists required plugin dependencies
  repeated PluginDependency dependencies = 3;
  // system_requirements specifies system-level requirements
  SystemRequirements system_requirements = 4;
  // runtime_requirements specifies runtime requirements
  RuntimeRequirements runtime_requirements = 5;
}

// PluginDependency represents a dependency on another plugin.
message PluginDependency {
  // name of the required plugin
  string name = 1;
  // version_constraint specifies the version requirement (e.g., ">=1.0.0,<2.0.0")
  string version_constraint = 2;
  // optional indicates if the dependency is optional
  bool optional = 3;
}

// SystemRequirements specifies system-level requirements.
message SystemRequirements {
  // min_memory_mb specifies minimum memory requirement in MB
  int64 min_memory_mb = 1;
  // min_disk_mb specifies minimum disk space requirement in MB  
  int64 min_disk_mb = 2;
  // supported_architectures lists supported CPU architectures
  repeated string supported_architectures = 3;
  // supported_os lists supported operating systems
  repeated string supported_os = 4;
}

// RuntimeRequirements specifies runtime environment requirements.
message RuntimeRequirements {
  // grpc_version specifies required gRPC version
  string grpc_version = 1;
  // tls_required indicates if TLS is required
  bool tls_required = 2;
  // auth_methods lists supported authentication methods
  repeated string auth_methods = 3;
  // timeout_seconds specifies the plugin response timeout
  int32 timeout_seconds = 4;
}

// GetPluginManifestRequest requests a plugin's manifest.
message GetPluginManifestRequest {
  // name of the plugin
  string name = 1;
  // version of the plugin (empty for latest)
  string version = 2;
  // source specifies where to retrieve the manifest
  DiscoverySource source = 3;
  // location provides the plugin location
  string location = 4;
}

// GetPluginManifestResponse contains the plugin manifest.
message GetPluginManifestResponse {
  // manifest contains the complete plugin manifest
  PluginManifest manifest = 1;
}

// PluginManifest defines the complete plugin specification.
message PluginManifest {
  // metadata contains basic plugin information
  PluginMetadata metadata = 1;
  // specification defines plugin capabilities and interface
  PluginSpecification specification = 2;
  // security contains security-related information
  PluginSecurity security = 3;
  // installation provides installation instructions
  InstallationSpec installation = 4;
  // configuration defines plugin configuration schema
  ConfigurationSpec configuration = 5;
}

// PluginMetadata contains basic plugin information.
message PluginMetadata {
  // name is the unique plugin identifier
  string name = 1;
  // version follows semantic versioning (e.g., "1.0.0")
  string version = 2;
  // description provides a human-readable description
  string description = 3;
  // author identifies the plugin author/organization
  string author = 4;
  // homepage provides the plugin's homepage URL
  string homepage = 5;
  // repository provides the source code repository URL
  string repository = 6;
  // license specifies the plugin license (e.g., "Apache-2.0")
  string license = 7;
  // keywords provides searchable keywords
  repeated string keywords = 8;
  // created_at indicates when the plugin was created
  google.protobuf.Timestamp created_at = 9;
  // updated_at indicates when the plugin was last updated
  google.protobuf.Timestamp updated_at = 10;
}

// PluginSpecification defines plugin capabilities and interface compliance.
message PluginSpecification {
  // spec_version indicates the PulumiCost spec version supported
  string spec_version = 1;
  // supported_providers lists supported cloud providers
  repeated string supported_providers = 2;
  // supported_resources lists supported resource types per provider
  map<string, ProviderResources> supported_resources = 3;
  // capabilities lists plugin-specific capabilities
  repeated string capabilities = 4;
  // service_definition defines the gRPC service interface
  ServiceDefinition service_definition = 5;
  // observability_support indicates observability features
  ObservabilitySupport observability_support = 6;
}

// ProviderResources lists resources supported by a provider.
message ProviderResources {
  // resource_types lists supported resource types
  repeated string resource_types = 1;
  // billing_modes lists supported billing modes
  repeated string billing_modes = 2;
  // regions lists supported regions
  repeated string regions = 3;
}

// ServiceDefinition defines the plugin's gRPC service interface.
message ServiceDefinition {
  // service_name is the gRPC service name
  string service_name = 1;
  // package_name is the protobuf package name  
  string package_name = 2;
  // methods lists the implemented RPC methods
  repeated string methods = 3;
  // port specifies the default service port
  int32 port = 4;
  // health_check_path provides health check endpoint
  string health_check_path = 5;
}

// ObservabilitySupport defines plugin observability capabilities.
message ObservabilitySupport {
  // metrics_enabled indicates if metrics are supported
  bool metrics_enabled = 1;
  // tracing_enabled indicates if distributed tracing is supported
  bool tracing_enabled = 2;
  // logging_enabled indicates if structured logging is supported  
  bool logging_enabled = 3;
  // health_checks_enabled indicates if health checks are supported
  bool health_checks_enabled = 4;
  // sli_support indicates if SLI reporting is supported
  bool sli_support = 5;
}

// PluginSecurity contains security-related information.
message PluginSecurity {
  // signature provides plugin signature for verification
  string signature = 1;
  // public_key provides the signing public key
  string public_key = 2;
  // certificate_chain provides certificate chain for verification
  repeated string certificate_chain = 3;
  // security_level indicates the plugin trust level
  SecurityLevel security_level = 4;
  // permissions lists required system permissions
  repeated string permissions = 5;
  // sandbox_required indicates if sandboxing is required
  bool sandbox_required = 6;
}

// InstallationSpec provides plugin installation instructions.
message InstallationSpec {
  // installation_method specifies how to install the plugin
  InstallationMethod installation_method = 1;
  // download_url provides the plugin download URL
  string download_url = 2;
  // checksum provides file integrity verification
  string checksum = 3;
  // checksum_algorithm specifies the checksum algorithm (e.g., "sha256")
  string checksum_algorithm = 4;
  // install_script provides installation script
  string install_script = 5;
  // pre_install_checks lists checks to run before installation
  repeated string pre_install_checks = 6;
  // post_install_steps lists steps to run after installation
  repeated string post_install_steps = 7;
}

// InstallationMethod defines how to install the plugin.
enum InstallationMethod {
  INSTALLATION_METHOD_UNSPECIFIED = 0;
  INSTALLATION_METHOD_BINARY = 1;        // Direct binary download
  INSTALLATION_METHOD_CONTAINER = 2;     // Container image
  INSTALLATION_METHOD_SCRIPT = 3;        // Installation script
  INSTALLATION_METHOD_PACKAGE = 4;       // System package manager
}

// ConfigurationSpec defines plugin configuration schema.
message ConfigurationSpec {
  // schema provides JSON schema for configuration validation
  string schema = 1;
  // default_config provides default configuration values
  string default_config = 2;
  // required_fields lists required configuration fields
  repeated string required_fields = 3;
  // examples provides configuration examples
  repeated ConfigurationExample examples = 4;
}

// ConfigurationExample provides a configuration example.
message ConfigurationExample {
  // name of the configuration example
  string name = 1;
  // description of the configuration scenario
  string description = 2;
  // config provides the example configuration
  string config = 3;
}

// ValidatePluginRequest requests plugin validation.
message ValidatePluginRequest {
  // manifest contains the plugin manifest to validate
  PluginManifest manifest = 1;
  // check_dependencies indicates whether to validate dependencies
  bool check_dependencies = 2;
  // check_system_requirements indicates whether to validate system requirements
  bool check_system_requirements = 3;
}

// ValidatePluginResponse contains plugin validation results.
message ValidatePluginResponse {
  // valid indicates if the plugin passed validation
  bool valid = 1;
  // validation_errors lists any validation errors found
  repeated ValidationError validation_errors = 2;
  // warnings lists any validation warnings
  repeated ValidationWarning warnings = 3;
}

// ValidationError represents a plugin validation error.
message ValidationError {
  // code is the error code
  string code = 1;
  // message provides a human-readable error message
  string message = 2;
  // field indicates the field that caused the error
  string field = 3;
  // severity indicates the error severity
  ErrorSeverity severity = 4;
}

// ValidationWarning represents a plugin validation warning.
message ValidationWarning {
  // code is the warning code
  string code = 1;
  // message provides a human-readable warning message
  string message = 2;
  // field indicates the field that caused the warning
  string field = 3;
  // recommendation provides suggested remediation
  string recommendation = 4;
}

// ErrorSeverity defines validation error severity levels.
enum ErrorSeverity {
  ERROR_SEVERITY_UNSPECIFIED = 0;
  ERROR_SEVERITY_INFO = 1;
  ERROR_SEVERITY_WARNING = 2;
  ERROR_SEVERITY_ERROR = 3;
  ERROR_SEVERITY_CRITICAL = 4;
}

// InstallPluginRequest requests plugin installation.
message InstallPluginRequest {
  // name of the plugin to install
  string name = 1;
  // version of the plugin to install (empty for latest)
  string version = 2;
  // source specifies the installation source
  DiscoverySource source = 3;
  // location provides the plugin location
  string location = 4;
  // force_install overwrites existing installation
  bool force_install = 5;
  // verify_signature indicates whether to verify plugin signature
  bool verify_signature = 6;
}

// InstallPluginResponse contains installation results.
message InstallPluginResponse {
  // success indicates if installation was successful
  bool success = 1;
  // installed_version provides the actually installed version
  string installed_version = 2;
  // install_path provides the installation path
  string install_path = 3;
  // installation_errors lists any installation errors
  repeated InstallationError installation_errors = 4;
}

// InstallationError represents a plugin installation error.
message InstallationError {
  // code is the error code
  string code = 1;
  // message provides a human-readable error message
  string message = 2;
  // step indicates the installation step that failed
  string step = 3;
  // recoverable indicates if the error can be recovered from
  bool recoverable = 4;
}

// UpdatePluginRequest requests plugin update.
message UpdatePluginRequest {
  // name of the plugin to update
  string name = 1;
  // target_version specifies the version to update to (empty for latest)
  string target_version = 2;
  // allow_downgrade allows downgrading to older version
  bool allow_downgrade = 3;
  // backup_current creates backup of current version
  bool backup_current = 4;
}

// UpdatePluginResponse contains update results.
message UpdatePluginResponse {
  // success indicates if update was successful
  bool success = 1;
  // previous_version provides the previous version
  string previous_version = 2;
  // updated_version provides the new version
  string updated_version = 3;
  // backup_path provides the backup location if created
  string backup_path = 4;
  // update_errors lists any update errors
  repeated InstallationError update_errors = 5;
}

// RemovePluginRequest requests plugin removal.
message RemovePluginRequest {
  // name of the plugin to remove
  string name = 1;
  // cleanup_data indicates whether to remove plugin data
  bool cleanup_data = 2;
  // force_remove forces removal even if plugin is in use
  bool force_remove = 3;
}

// RemovePluginResponse contains removal results.
message RemovePluginResponse {
  // success indicates if removal was successful
  bool success = 1;
  // removed_version provides the version that was removed
  string removed_version = 2;
  // cleanup_paths lists paths that were cleaned up
  repeated string cleanup_paths = 3;
  // removal_errors lists any removal errors
  repeated InstallationError removal_errors = 4;
}

// ListInstalledPluginsRequest requests list of installed plugins.
message ListInstalledPluginsRequest {
  // filter optionally filters results by plugin name pattern
  string filter = 1;
  // include_inactive includes inactive plugins in results
  bool include_inactive = 2;
}

// ListInstalledPluginsResponse contains installed plugin list.
message ListInstalledPluginsResponse {
  // plugins contains the list of installed plugins
  repeated PluginInfo plugins = 1;
}

// CheckPluginHealthRequest requests plugin health check.
message CheckPluginHealthRequest {
  // name of the plugin to check
  string name = 1;
  // timeout_seconds specifies health check timeout
  int32 timeout_seconds = 2;
}

// CheckPluginHealthResponse contains plugin health status.
message CheckPluginHealthResponse {
  // healthy indicates if plugin is healthy
  bool healthy = 1;
  // status provides detailed status information
  string status = 2;
  // last_check_time indicates when health was last checked
  google.protobuf.Timestamp last_check_time = 3;
  // health_errors lists any health check errors
  repeated HealthCheckError health_errors = 4;
}

// HealthCheckError represents a plugin health check error.
message HealthCheckError {
  // code is the error code
  string code = 1;
  // message provides a human-readable error message
  string message = 2;
  // component indicates which plugin component has the error
  string component = 3;
  // severity indicates the error severity
  ErrorSeverity severity = 4;
}

// DiscoveryError represents an error during plugin discovery.
message DiscoveryError {
  // source indicates which discovery source had the error
  DiscoverySource source = 1;
  // location provides the location where error occurred
  string location = 2;
  // error_code is the error code
  string error_code = 3;
  // error_message provides a human-readable error message
  string error_message = 4;
}