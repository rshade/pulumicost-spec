// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pulumicost/v1/registry.proto

package pbc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PluginRegistryService_DiscoverPlugins_FullMethodName      = "/pulumicost.v1.PluginRegistryService/DiscoverPlugins"
	PluginRegistryService_GetPluginManifest_FullMethodName    = "/pulumicost.v1.PluginRegistryService/GetPluginManifest"
	PluginRegistryService_ValidatePlugin_FullMethodName       = "/pulumicost.v1.PluginRegistryService/ValidatePlugin"
	PluginRegistryService_InstallPlugin_FullMethodName        = "/pulumicost.v1.PluginRegistryService/InstallPlugin"
	PluginRegistryService_UpdatePlugin_FullMethodName         = "/pulumicost.v1.PluginRegistryService/UpdatePlugin"
	PluginRegistryService_RemovePlugin_FullMethodName         = "/pulumicost.v1.PluginRegistryService/RemovePlugin"
	PluginRegistryService_ListInstalledPlugins_FullMethodName = "/pulumicost.v1.PluginRegistryService/ListInstalledPlugins"
	PluginRegistryService_CheckPluginHealth_FullMethodName    = "/pulumicost.v1.PluginRegistryService/CheckPluginHealth"
)

// PluginRegistryServiceClient is the client API for PluginRegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PluginRegistryService provides gRPC interface for plugin discovery,
// registration, and lifecycle management within the PulumiCost ecosystem.
type PluginRegistryServiceClient interface {
	// DiscoverPlugins discovers available plugins from configured sources.
	DiscoverPlugins(ctx context.Context, in *DiscoverPluginsRequest, opts ...grpc.CallOption) (*DiscoverPluginsResponse, error)
	// GetPluginManifest retrieves the manifest for a specific plugin.
	GetPluginManifest(ctx context.Context, in *GetPluginManifestRequest, opts ...grpc.CallOption) (*GetPluginManifestResponse, error)
	// ValidatePlugin validates a plugin's manifest and dependencies.
	ValidatePlugin(ctx context.Context, in *ValidatePluginRequest, opts ...grpc.CallOption) (*ValidatePluginResponse, error)
	// InstallPlugin installs a plugin from a specified source.
	InstallPlugin(ctx context.Context, in *InstallPluginRequest, opts ...grpc.CallOption) (*InstallPluginResponse, error)
	// UpdatePlugin updates an existing plugin to a new version.
	UpdatePlugin(ctx context.Context, in *UpdatePluginRequest, opts ...grpc.CallOption) (*UpdatePluginResponse, error)
	// RemovePlugin removes an installed plugin.
	RemovePlugin(ctx context.Context, in *RemovePluginRequest, opts ...grpc.CallOption) (*RemovePluginResponse, error)
	// ListInstalledPlugins lists all currently installed plugins.
	ListInstalledPlugins(ctx context.Context, in *ListInstalledPluginsRequest, opts ...grpc.CallOption) (*ListInstalledPluginsResponse, error)
	// CheckPluginHealth verifies plugin health and connectivity.
	CheckPluginHealth(ctx context.Context, in *CheckPluginHealthRequest, opts ...grpc.CallOption) (*CheckPluginHealthResponse, error)
}

type pluginRegistryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginRegistryServiceClient(cc grpc.ClientConnInterface) PluginRegistryServiceClient {
	return &pluginRegistryServiceClient{cc}
}

func (c *pluginRegistryServiceClient) DiscoverPlugins(ctx context.Context, in *DiscoverPluginsRequest, opts ...grpc.CallOption) (*DiscoverPluginsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiscoverPluginsResponse)
	err := c.cc.Invoke(ctx, PluginRegistryService_DiscoverPlugins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginRegistryServiceClient) GetPluginManifest(ctx context.Context, in *GetPluginManifestRequest, opts ...grpc.CallOption) (*GetPluginManifestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPluginManifestResponse)
	err := c.cc.Invoke(ctx, PluginRegistryService_GetPluginManifest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginRegistryServiceClient) ValidatePlugin(ctx context.Context, in *ValidatePluginRequest, opts ...grpc.CallOption) (*ValidatePluginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidatePluginResponse)
	err := c.cc.Invoke(ctx, PluginRegistryService_ValidatePlugin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginRegistryServiceClient) InstallPlugin(ctx context.Context, in *InstallPluginRequest, opts ...grpc.CallOption) (*InstallPluginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstallPluginResponse)
	err := c.cc.Invoke(ctx, PluginRegistryService_InstallPlugin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginRegistryServiceClient) UpdatePlugin(ctx context.Context, in *UpdatePluginRequest, opts ...grpc.CallOption) (*UpdatePluginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePluginResponse)
	err := c.cc.Invoke(ctx, PluginRegistryService_UpdatePlugin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginRegistryServiceClient) RemovePlugin(ctx context.Context, in *RemovePluginRequest, opts ...grpc.CallOption) (*RemovePluginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemovePluginResponse)
	err := c.cc.Invoke(ctx, PluginRegistryService_RemovePlugin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginRegistryServiceClient) ListInstalledPlugins(ctx context.Context, in *ListInstalledPluginsRequest, opts ...grpc.CallOption) (*ListInstalledPluginsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInstalledPluginsResponse)
	err := c.cc.Invoke(ctx, PluginRegistryService_ListInstalledPlugins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginRegistryServiceClient) CheckPluginHealth(ctx context.Context, in *CheckPluginHealthRequest, opts ...grpc.CallOption) (*CheckPluginHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckPluginHealthResponse)
	err := c.cc.Invoke(ctx, PluginRegistryService_CheckPluginHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginRegistryServiceServer is the server API for PluginRegistryService service.
// All implementations must embed UnimplementedPluginRegistryServiceServer
// for forward compatibility.
//
// PluginRegistryService provides gRPC interface for plugin discovery,
// registration, and lifecycle management within the PulumiCost ecosystem.
type PluginRegistryServiceServer interface {
	// DiscoverPlugins discovers available plugins from configured sources.
	DiscoverPlugins(context.Context, *DiscoverPluginsRequest) (*DiscoverPluginsResponse, error)
	// GetPluginManifest retrieves the manifest for a specific plugin.
	GetPluginManifest(context.Context, *GetPluginManifestRequest) (*GetPluginManifestResponse, error)
	// ValidatePlugin validates a plugin's manifest and dependencies.
	ValidatePlugin(context.Context, *ValidatePluginRequest) (*ValidatePluginResponse, error)
	// InstallPlugin installs a plugin from a specified source.
	InstallPlugin(context.Context, *InstallPluginRequest) (*InstallPluginResponse, error)
	// UpdatePlugin updates an existing plugin to a new version.
	UpdatePlugin(context.Context, *UpdatePluginRequest) (*UpdatePluginResponse, error)
	// RemovePlugin removes an installed plugin.
	RemovePlugin(context.Context, *RemovePluginRequest) (*RemovePluginResponse, error)
	// ListInstalledPlugins lists all currently installed plugins.
	ListInstalledPlugins(context.Context, *ListInstalledPluginsRequest) (*ListInstalledPluginsResponse, error)
	// CheckPluginHealth verifies plugin health and connectivity.
	CheckPluginHealth(context.Context, *CheckPluginHealthRequest) (*CheckPluginHealthResponse, error)
	mustEmbedUnimplementedPluginRegistryServiceServer()
}

// UnimplementedPluginRegistryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPluginRegistryServiceServer struct{}

func (UnimplementedPluginRegistryServiceServer) DiscoverPlugins(context.Context, *DiscoverPluginsRequest) (*DiscoverPluginsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverPlugins not implemented")
}
func (UnimplementedPluginRegistryServiceServer) GetPluginManifest(context.Context, *GetPluginManifestRequest) (*GetPluginManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPluginManifest not implemented")
}
func (UnimplementedPluginRegistryServiceServer) ValidatePlugin(context.Context, *ValidatePluginRequest) (*ValidatePluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePlugin not implemented")
}
func (UnimplementedPluginRegistryServiceServer) InstallPlugin(context.Context, *InstallPluginRequest) (*InstallPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallPlugin not implemented")
}
func (UnimplementedPluginRegistryServiceServer) UpdatePlugin(context.Context, *UpdatePluginRequest) (*UpdatePluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlugin not implemented")
}
func (UnimplementedPluginRegistryServiceServer) RemovePlugin(context.Context, *RemovePluginRequest) (*RemovePluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePlugin not implemented")
}
func (UnimplementedPluginRegistryServiceServer) ListInstalledPlugins(context.Context, *ListInstalledPluginsRequest) (*ListInstalledPluginsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstalledPlugins not implemented")
}
func (UnimplementedPluginRegistryServiceServer) CheckPluginHealth(context.Context, *CheckPluginHealthRequest) (*CheckPluginHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPluginHealth not implemented")
}
func (UnimplementedPluginRegistryServiceServer) mustEmbedUnimplementedPluginRegistryServiceServer() {}
func (UnimplementedPluginRegistryServiceServer) testEmbeddedByValue()                               {}

// UnsafePluginRegistryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginRegistryServiceServer will
// result in compilation errors.
type UnsafePluginRegistryServiceServer interface {
	mustEmbedUnimplementedPluginRegistryServiceServer()
}

func RegisterPluginRegistryServiceServer(s grpc.ServiceRegistrar, srv PluginRegistryServiceServer) {
	// If the following call pancis, it indicates UnimplementedPluginRegistryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PluginRegistryService_ServiceDesc, srv)
}

func _PluginRegistryService_DiscoverPlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverPluginsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginRegistryServiceServer).DiscoverPlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginRegistryService_DiscoverPlugins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginRegistryServiceServer).DiscoverPlugins(ctx, req.(*DiscoverPluginsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginRegistryService_GetPluginManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPluginManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginRegistryServiceServer).GetPluginManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginRegistryService_GetPluginManifest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginRegistryServiceServer).GetPluginManifest(ctx, req.(*GetPluginManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginRegistryService_ValidatePlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatePluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginRegistryServiceServer).ValidatePlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginRegistryService_ValidatePlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginRegistryServiceServer).ValidatePlugin(ctx, req.(*ValidatePluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginRegistryService_InstallPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginRegistryServiceServer).InstallPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginRegistryService_InstallPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginRegistryServiceServer).InstallPlugin(ctx, req.(*InstallPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginRegistryService_UpdatePlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginRegistryServiceServer).UpdatePlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginRegistryService_UpdatePlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginRegistryServiceServer).UpdatePlugin(ctx, req.(*UpdatePluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginRegistryService_RemovePlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginRegistryServiceServer).RemovePlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginRegistryService_RemovePlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginRegistryServiceServer).RemovePlugin(ctx, req.(*RemovePluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginRegistryService_ListInstalledPlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstalledPluginsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginRegistryServiceServer).ListInstalledPlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginRegistryService_ListInstalledPlugins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginRegistryServiceServer).ListInstalledPlugins(ctx, req.(*ListInstalledPluginsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginRegistryService_CheckPluginHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPluginHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginRegistryServiceServer).CheckPluginHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginRegistryService_CheckPluginHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginRegistryServiceServer).CheckPluginHealth(ctx, req.(*CheckPluginHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginRegistryService_ServiceDesc is the grpc.ServiceDesc for PluginRegistryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginRegistryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pulumicost.v1.PluginRegistryService",
	HandlerType: (*PluginRegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DiscoverPlugins",
			Handler:    _PluginRegistryService_DiscoverPlugins_Handler,
		},
		{
			MethodName: "GetPluginManifest",
			Handler:    _PluginRegistryService_GetPluginManifest_Handler,
		},
		{
			MethodName: "ValidatePlugin",
			Handler:    _PluginRegistryService_ValidatePlugin_Handler,
		},
		{
			MethodName: "InstallPlugin",
			Handler:    _PluginRegistryService_InstallPlugin_Handler,
		},
		{
			MethodName: "UpdatePlugin",
			Handler:    _PluginRegistryService_UpdatePlugin_Handler,
		},
		{
			MethodName: "RemovePlugin",
			Handler:    _PluginRegistryService_RemovePlugin_Handler,
		},
		{
			MethodName: "ListInstalledPlugins",
			Handler:    _PluginRegistryService_ListInstalledPlugins_Handler,
		},
		{
			MethodName: "CheckPluginHealth",
			Handler:    _PluginRegistryService_CheckPluginHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pulumicost/v1/registry.proto",
}
