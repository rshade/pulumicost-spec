// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pulumicost/v1/costsource.proto

package pbc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CostSourceService_Name_FullMethodName             = "/pulumicost.v1.CostSourceService/Name"
	CostSourceService_Supports_FullMethodName         = "/pulumicost.v1.CostSourceService/Supports"
	CostSourceService_GetActualCost_FullMethodName    = "/pulumicost.v1.CostSourceService/GetActualCost"
	CostSourceService_GetProjectedCost_FullMethodName = "/pulumicost.v1.CostSourceService/GetProjectedCost"
	CostSourceService_GetPricingSpec_FullMethodName   = "/pulumicost.v1.CostSourceService/GetPricingSpec"
)

// CostSourceServiceClient is the client API for CostSourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CostSourceService provides gRPC interface for cost source plugins to implement.
// This service defines the contract for retrieving actual costs, projected costs,
// and pricing specifications from various cost data sources.
type CostSourceServiceClient interface {
	// Name returns the display name of the cost source plugin.
	Name(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*NameResponse, error)
	// Supports checks if the cost source supports pricing for a given resource type.
	Supports(ctx context.Context, in *SupportsRequest, opts ...grpc.CallOption) (*SupportsResponse, error)
	// GetActualCost retrieves historical cost data for a specific resource.
	GetActualCost(ctx context.Context, in *GetActualCostRequest, opts ...grpc.CallOption) (*GetActualCostResponse, error)
	// GetProjectedCost calculates projected cost information for a resource.
	GetProjectedCost(ctx context.Context, in *GetProjectedCostRequest, opts ...grpc.CallOption) (*GetProjectedCostResponse, error)
	// GetPricingSpec returns detailed pricing specification for a resource type.
	GetPricingSpec(ctx context.Context, in *GetPricingSpecRequest, opts ...grpc.CallOption) (*GetPricingSpecResponse, error)
}

type costSourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCostSourceServiceClient(cc grpc.ClientConnInterface) CostSourceServiceClient {
	return &costSourceServiceClient{cc}
}

func (c *costSourceServiceClient) Name(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*NameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NameResponse)
	err := c.cc.Invoke(ctx, CostSourceService_Name_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costSourceServiceClient) Supports(ctx context.Context, in *SupportsRequest, opts ...grpc.CallOption) (*SupportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupportsResponse)
	err := c.cc.Invoke(ctx, CostSourceService_Supports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costSourceServiceClient) GetActualCost(ctx context.Context, in *GetActualCostRequest, opts ...grpc.CallOption) (*GetActualCostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActualCostResponse)
	err := c.cc.Invoke(ctx, CostSourceService_GetActualCost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costSourceServiceClient) GetProjectedCost(ctx context.Context, in *GetProjectedCostRequest, opts ...grpc.CallOption) (*GetProjectedCostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectedCostResponse)
	err := c.cc.Invoke(ctx, CostSourceService_GetProjectedCost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costSourceServiceClient) GetPricingSpec(ctx context.Context, in *GetPricingSpecRequest, opts ...grpc.CallOption) (*GetPricingSpecResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPricingSpecResponse)
	err := c.cc.Invoke(ctx, CostSourceService_GetPricingSpec_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CostSourceServiceServer is the server API for CostSourceService service.
// All implementations must embed UnimplementedCostSourceServiceServer
// for forward compatibility.
//
// CostSourceService provides gRPC interface for cost source plugins to implement.
// This service defines the contract for retrieving actual costs, projected costs,
// and pricing specifications from various cost data sources.
type CostSourceServiceServer interface {
	// Name returns the display name of the cost source plugin.
	Name(context.Context, *NameRequest) (*NameResponse, error)
	// Supports checks if the cost source supports pricing for a given resource type.
	Supports(context.Context, *SupportsRequest) (*SupportsResponse, error)
	// GetActualCost retrieves historical cost data for a specific resource.
	GetActualCost(context.Context, *GetActualCostRequest) (*GetActualCostResponse, error)
	// GetProjectedCost calculates projected cost information for a resource.
	GetProjectedCost(context.Context, *GetProjectedCostRequest) (*GetProjectedCostResponse, error)
	// GetPricingSpec returns detailed pricing specification for a resource type.
	GetPricingSpec(context.Context, *GetPricingSpecRequest) (*GetPricingSpecResponse, error)
	mustEmbedUnimplementedCostSourceServiceServer()
}

// UnimplementedCostSourceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCostSourceServiceServer struct{}

func (UnimplementedCostSourceServiceServer) Name(context.Context, *NameRequest) (*NameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Name not implemented")
}
func (UnimplementedCostSourceServiceServer) Supports(context.Context, *SupportsRequest) (*SupportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Supports not implemented")
}
func (UnimplementedCostSourceServiceServer) GetActualCost(context.Context, *GetActualCostRequest) (*GetActualCostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActualCost not implemented")
}
func (UnimplementedCostSourceServiceServer) GetProjectedCost(context.Context, *GetProjectedCostRequest) (*GetProjectedCostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectedCost not implemented")
}
func (UnimplementedCostSourceServiceServer) GetPricingSpec(context.Context, *GetPricingSpecRequest) (*GetPricingSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPricingSpec not implemented")
}
func (UnimplementedCostSourceServiceServer) mustEmbedUnimplementedCostSourceServiceServer() {}
func (UnimplementedCostSourceServiceServer) testEmbeddedByValue()                           {}

// UnsafeCostSourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CostSourceServiceServer will
// result in compilation errors.
type UnsafeCostSourceServiceServer interface {
	mustEmbedUnimplementedCostSourceServiceServer()
}

func RegisterCostSourceServiceServer(s grpc.ServiceRegistrar, srv CostSourceServiceServer) {
	// If the following call pancis, it indicates UnimplementedCostSourceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CostSourceService_ServiceDesc, srv)
}

func _CostSourceService_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostSourceServiceServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostSourceService_Name_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostSourceServiceServer).Name(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostSourceService_Supports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostSourceServiceServer).Supports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostSourceService_Supports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostSourceServiceServer).Supports(ctx, req.(*SupportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostSourceService_GetActualCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActualCostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostSourceServiceServer).GetActualCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostSourceService_GetActualCost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostSourceServiceServer).GetActualCost(ctx, req.(*GetActualCostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostSourceService_GetProjectedCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectedCostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostSourceServiceServer).GetProjectedCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostSourceService_GetProjectedCost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostSourceServiceServer).GetProjectedCost(ctx, req.(*GetProjectedCostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostSourceService_GetPricingSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPricingSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostSourceServiceServer).GetPricingSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostSourceService_GetPricingSpec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostSourceServiceServer).GetPricingSpec(ctx, req.(*GetPricingSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CostSourceService_ServiceDesc is the grpc.ServiceDesc for CostSourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CostSourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pulumicost.v1.CostSourceService",
	HandlerType: (*CostSourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Name",
			Handler:    _CostSourceService_Name_Handler,
		},
		{
			MethodName: "Supports",
			Handler:    _CostSourceService_Supports_Handler,
		},
		{
			MethodName: "GetActualCost",
			Handler:    _CostSourceService_GetActualCost_Handler,
		},
		{
			MethodName: "GetProjectedCost",
			Handler:    _CostSourceService_GetProjectedCost_Handler,
		},
		{
			MethodName: "GetPricingSpec",
			Handler:    _CostSourceService_GetPricingSpec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pulumicost/v1/costsource.proto",
}

const (
	ObservabilityService_HealthCheck_FullMethodName               = "/pulumicost.v1.ObservabilityService/HealthCheck"
	ObservabilityService_GetMetrics_FullMethodName                = "/pulumicost.v1.ObservabilityService/GetMetrics"
	ObservabilityService_GetServiceLevelIndicators_FullMethodName = "/pulumicost.v1.ObservabilityService/GetServiceLevelIndicators"
)

// ObservabilityServiceClient is the client API for ObservabilityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ObservabilityService provides telemetry, health checks, and monitoring capabilities
// for cost source plugins. This service enables monitoring, debugging, and performance
// optimization of plugin implementations.
type ObservabilityServiceClient interface {
	// HealthCheck returns the current health status of the plugin.
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// GetMetrics returns current metrics for monitoring plugin performance.
	GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error)
	// GetServiceLevelIndicators returns current SLI measurements.
	GetServiceLevelIndicators(ctx context.Context, in *GetServiceLevelIndicatorsRequest, opts ...grpc.CallOption) (*GetServiceLevelIndicatorsResponse, error)
}

type observabilityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewObservabilityServiceClient(cc grpc.ClientConnInterface) ObservabilityServiceClient {
	return &observabilityServiceClient{cc}
}

func (c *observabilityServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, ObservabilityService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *observabilityServiceClient) GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMetricsResponse)
	err := c.cc.Invoke(ctx, ObservabilityService_GetMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *observabilityServiceClient) GetServiceLevelIndicators(ctx context.Context, in *GetServiceLevelIndicatorsRequest, opts ...grpc.CallOption) (*GetServiceLevelIndicatorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServiceLevelIndicatorsResponse)
	err := c.cc.Invoke(ctx, ObservabilityService_GetServiceLevelIndicators_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObservabilityServiceServer is the server API for ObservabilityService service.
// All implementations must embed UnimplementedObservabilityServiceServer
// for forward compatibility.
//
// ObservabilityService provides telemetry, health checks, and monitoring capabilities
// for cost source plugins. This service enables monitoring, debugging, and performance
// optimization of plugin implementations.
type ObservabilityServiceServer interface {
	// HealthCheck returns the current health status of the plugin.
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// GetMetrics returns current metrics for monitoring plugin performance.
	GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error)
	// GetServiceLevelIndicators returns current SLI measurements.
	GetServiceLevelIndicators(context.Context, *GetServiceLevelIndicatorsRequest) (*GetServiceLevelIndicatorsResponse, error)
	mustEmbedUnimplementedObservabilityServiceServer()
}

// UnimplementedObservabilityServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedObservabilityServiceServer struct{}

func (UnimplementedObservabilityServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedObservabilityServiceServer) GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedObservabilityServiceServer) GetServiceLevelIndicators(context.Context, *GetServiceLevelIndicatorsRequest) (*GetServiceLevelIndicatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceLevelIndicators not implemented")
}
func (UnimplementedObservabilityServiceServer) mustEmbedUnimplementedObservabilityServiceServer() {}
func (UnimplementedObservabilityServiceServer) testEmbeddedByValue()                              {}

// UnsafeObservabilityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObservabilityServiceServer will
// result in compilation errors.
type UnsafeObservabilityServiceServer interface {
	mustEmbedUnimplementedObservabilityServiceServer()
}

func RegisterObservabilityServiceServer(s grpc.ServiceRegistrar, srv ObservabilityServiceServer) {
	// If the following call pancis, it indicates UnimplementedObservabilityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ObservabilityService_ServiceDesc, srv)
}

func _ObservabilityService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObservabilityServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObservabilityService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObservabilityServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObservabilityService_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObservabilityServiceServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObservabilityService_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObservabilityServiceServer).GetMetrics(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObservabilityService_GetServiceLevelIndicators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceLevelIndicatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObservabilityServiceServer).GetServiceLevelIndicators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObservabilityService_GetServiceLevelIndicators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObservabilityServiceServer).GetServiceLevelIndicators(ctx, req.(*GetServiceLevelIndicatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ObservabilityService_ServiceDesc is the grpc.ServiceDesc for ObservabilityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObservabilityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pulumicost.v1.ObservabilityService",
	HandlerType: (*ObservabilityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _ObservabilityService_HealthCheck_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _ObservabilityService_GetMetrics_Handler,
		},
		{
			MethodName: "GetServiceLevelIndicators",
			Handler:    _ObservabilityService_GetServiceLevelIndicators_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pulumicost/v1/costsource.proto",
}
